definitions:
  controller.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    type: object
  controller.RegisterInput:
    properties:
      email:
        type: string
      password:
        minLength: 5
        type: string
      username:
        minLength: 5
        type: string
    required:
    - email
    - password
    - username
    type: object
  controller.brandInput:
    properties:
      description:
        type: string
      logo_url:
        type: string
      name:
        type: string
    required:
    - logo_url
    - name
    type: object
  controller.changePasswordInput:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    type: object
  controller.commentInput:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  controller.deleteUserInput:
    properties:
      password:
        type: string
    type: object
  controller.phoneInput:
    properties:
      brand_id:
        type: integer
      image_url:
        type: string
      model:
        type: string
      price:
        type: integer
      release_date:
        type: string
    type: object
  controller.profileInput:
    properties:
      biodata:
        type: string
      birthday:
        type: string
      full_name:
        type: string
      image_url:
        type: string
    type: object
  controller.reviewInput:
    properties:
      content:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
    required:
    - content
    - rating
    type: object
  controller.roleInput:
    properties:
      name:
        type: string
    type: object
  controller.specificationInput:
    properties:
      additional_feature:
        type: string
      battery:
        type: string
      camera:
        type: integer
      memory:
        type: integer
      network:
        type: string
      operating_system:
        type: string
      storage:
        type: integer
    required:
    - battery
    - camera
    - memory
    - network
    - operating_system
    - storage
    type: object
  controller.userUpdate:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  models.Brand:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      logo_url:
        type: string
      name:
        type: string
      phones:
        items:
          $ref: '#/definitions/models.Phone'
        type: array
      updated_at:
        type: string
    type: object
  models.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      review_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Phone:
    properties:
      brand_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      image_url:
        type: string
      model:
        type: string
      price:
        type: integer
      release_date:
        type: string
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      specification:
        items:
          $ref: '#/definitions/models.Specification'
        type: array
      updated_at:
        type: string
    type: object
  models.Profile:
    properties:
      biodata:
        type: string
      birthday:
        type: string
      created_at:
        type: string
      full_name:
        type: string
      id:
        type: integer
      image_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Review:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      phone_id:
        type: integer
      rating:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Specification:
    properties:
      additional_feature:
        type: string
      battery:
        type: string
      camera:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      memory:
        type: integer
      network:
        type: string
      operating_system:
        type: string
      phone_id:
        type: integer
      storage:
        type: integer
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      profiles:
        items:
          $ref: '#/definitions/models.Profile'
        type: array
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /admins:
    get:
      description: Get a list of account with 'admin' role, only role admin can acces
        this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      security:
      - BearerToken: []
      summary: Get all account with 'admin' role. (admin only)
      tags:
      - Admins
  /admins/{id}:
    get:
      description: Get admin data by ID. only role admin can acces to this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: admin id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      security:
      - BearerToken: []
      summary: Get single admin by ID. (admin only)
      tags:
      - Admins
  /admins/{id}/profile:
    get:
      description: Get all Admins profile data by admin id. only admin can access
        this route, if admin not create profile yet the profile will not appear
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: admin id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerToken: []
      summary: Get profiles data by Admin id. (admin only)
      tags:
      - Admins
  /admins/{id}/reviews:
    get:
      description: Get all Users review data by user id if user not create review
        yet the review will not appear
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerToken: []
      summary: Get reviews data by User id. (ADMIN ONLY)
      tags:
      - Admins
  /admins/register:
    post:
      description: registering a new account with admin role, only account with role
        admin can access this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: the body to register a admin
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Register a new account as admin role. (admin only)
      tags:
      - Admins
  /auth/change-password:
    put:
      description: changging current logged in user's password
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: body for changing user's password, user id is taken from the
          authorization token
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.changePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: Change password (ADMIN AND USER)
      tags:
      - Auth
  /auth/login:
    post:
      description: Logging in to get jwt token to access admin or user api by roles.
      parameters:
      - description: the body to login a user choose using email or username
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Login.
      tags:
      - Auth
  /auth/logout:
    post:
      description: Simple logout for (user/admin)
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerToken: []
      summary: logout (ADMIN AND USER)
      tags:
      - Auth
  /auth/register:
    post:
      description: registering a user from public access.
      parameters:
      - description: the body to register a user, username min 5 characters
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Register a user.
      tags:
      - Auth
  /brands:
    get:
      description: Get a list of Phone brands.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Brand'
            type: array
      summary: Get all Phones brands. (PUBLIC)
      tags:
      - Brands
    post:
      description: Creating a new Brand data, only account with role admin can access
        this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: example JSON body to create a new Brand
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.brandInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Brand'
      security:
      - BearerToken: []
      summary: Create New Brand (ADMIN ONLY)
      tags:
      - Brands
  /brands/{id}:
    delete:
      description: Delete a Brand by id
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Brand id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete Brand by id . (ADMIN ONLY)
      tags:
      - Brands
    get:
      description: Get Brand data by ID.
      parameters:
      - description: Brand id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Brand'
            type: array
      summary: Get single brand data by ID. (PUBLIC)
      tags:
      - Brands
    put:
      description: Update Brand data by id, only account with role admin can access
        this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Brand id
        in: path
        name: id
        required: true
        type: string
      - description: tExample JSON body to update Brand data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.brandInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Brand'
      security:
      - BearerToken: []
      summary: Update Brand data. (ADMIN ONLY)
      tags:
      - Brands
  /brands/{id}/phones:
    get:
      description: Get all Phones data by brand id.
      parameters:
      - description: Brand id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Brand'
            type: array
      summary: Get phones data by Brand id. (PUBLIC)
      tags:
      - Brands
  /comments/{id}:
    delete:
      description: Delete a Comment by id, (user ID is taken from the JWT token so
        only loogged in user can delete its own coment)
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete Comment by id .
      tags:
      - Comments
  /phones:
    get:
      description: Get a list of Phone.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Phone'
            type: array
      summary: Get all Phones data. (PUBLIC)
      tags:
      - Phones
    post:
      description: Creating a new Phone data, only account with role admin can accsess
        this route
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: example JSON body to create a new Phone, sample release_data
          format = 2023-09-22T00:00:00Z
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.phoneInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Phone'
      security:
      - BearerToken: []
      summary: Create New Phone (ADMIN ONLY)
      tags:
      - Phones
  /phones/{id}:
    delete:
      description: Delete a Phone by id, only account with role admin can access this
        route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Phone id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete Phone by id . (ADMIN ONLY)
      tags:
      - Phones
    get:
      description: Get a Phone by id.
      parameters:
      - description: phone id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Phone'
      summary: Get Phone. (PUBLIC)
      tags:
      - Phones
    put:
      description: Update Phone data by id, only account with role admin can access
        this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Phone id
        in: path
        name: id
        required: true
        type: string
      - description: Example JSON body to update Phone data, sample release_data format
          = 2023-09-22T00:00:00Z
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.phoneInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Phone'
      security:
      - BearerToken: []
      summary: Update Phone data. (ADMIN ONLY)
      tags:
      - Phones
  /phones/{id}/reviews:
    get:
      description: Get all Reviews data by phone id. if reviews data is empty, the
        review data will not be displayed
      parameters:
      - description: Phone id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Phone'
            type: array
      summary: Get reviews data by Phone id. (PUBLIC)
      tags:
      - Phones
    post:
      description: This route will create review data , user ID is taken from the
        JWT token, one user only can give one review to one phone
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Phone id
        in: path
        name: id
        required: true
        type: string
      - description: example JSON body to create a new Review
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.reviewInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Review'
      security:
      - BearerToken: []
      summary: Create New Review
      tags:
      - Phones
    put:
      description: This route will update review data , user ID is taken from the
        JWT token
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: phone id
        in: path
        name: id
        required: true
        type: string
      - description: example JSON body to update a review for phone
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.reviewInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Review'
      security:
      - BearerToken: []
      summary: Update Review for phone
      tags:
      - Phones
  /phones/{id}/specification:
    get:
      description: Get Phone specifiction data by phone id. if phone's specification
        data empty, the spec data will not be displayed
      parameters:
      - description: Phone id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Phone'
            type: array
      summary: Get specification data by Phone id. (PUBLIC)
      tags:
      - Phones
    post:
      description: Creating a specification data for phone, only admin can access
        this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Phone id
        in: path
        name: id
        required: true
        type: string
      - description: example JSON body to create a specification for phone
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.specificationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Specification'
      security:
      - BearerToken: []
      summary: Create Specification for phone (ADMIN ONLY)
      tags:
      - Phones
    put:
      description: Creating a specification data for phone, only admin can access
        this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: phone id
        in: path
        name: id
        required: true
        type: string
      - description: example JSON body to update a specification for phone
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.specificationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Specification'
      security:
      - BearerToken: []
      summary: Update Specification for phone (ADMIN ONLY)
      tags:
      - Phones
  /profiles:
    post:
      description: Creating a profile data for user, user ID is taken from JWT Token
        so only acount's owner can create the profile
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: example JSON body to create a profile for user, user_id is taken
          from the authorization token
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.profileInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
      security:
      - BearerToken: []
      summary: Create Profile for user
      tags:
      - Profiles
    put:
      description: Updating a profile data for user, user ID is taken from JWT Token
        so only acount's owner can update the profile
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: example JSON body to update a profile for user, user_id is taken
          from the authorization token
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.profileInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
      security:
      - BearerToken: []
      summary: Update Profile for user
      tags:
      - Profiles
  /reviews/{id}:
    delete:
      description: This route will delete review data, based on the review ID and
        will only be able to delete data related to the logged in user (user ID is
        taken from the JWT token)
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: review id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Review'
            type: array
      security:
      - BearerToken: []
      summary: Delete review by ID
      tags:
      - Reviews
  /reviews/{id}/comments:
    get:
      description: Get all Comments data by review id.
      parameters:
      - description: Review id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Review'
            type: array
      summary: Get comments data by Review id.
      tags:
      - Reviews
    post:
      description: Creating a comment on a phone review, (user ID is taken from the
        JWT token)
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: review id
        in: path
        name: id
        required: true
        type: string
      - description: example JSON body to create a comment, user_id is taken from
          the authorization token
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.commentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - BearerToken: []
      summary: Create Comment on a review
      tags:
      - Reviews
  /reviews/{id}/comments/{com_id}:
    put:
      description: This route will update comment data, will only be able to update
        data related to the logged in user (user ID is taken from the JWT token)
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: review id
        in: path
        name: id
        required: true
        type: string
      - description: comment id
        in: path
        name: com_id
        required: true
        type: string
      - description: example JSON body to update a comment, user_id is taken from
          the authorization token
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.commentInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      security:
      - BearerToken: []
      summary: Update Comment on a review
      tags:
      - Reviews
  /roles:
    get:
      description: Get a list of user's roles. only admin can access this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      security:
      - BearerToken: []
      summary: Get all  roles. (ADMIN ONLY)
      tags:
      - Roles
    post:
      description: Creating a new Role data, only admin can access this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: example JSON body to create a new Role
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.roleInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
      security:
      - BearerToken: []
      summary: Create New Role (ADMIN ONLY)
      tags:
      - Roles
  /roles/{id}:
    delete:
      description: Delete a Role by id, only admin can access this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
      security:
      - BearerToken: []
      summary: Delete Role by id . (ADMIN ONLY)
      tags:
      - Roles
    get:
      description: Get a role data by id. only admin can access this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      security:
      - BearerToken: []
      summary: Get role by ID. (ADMIN ONLY)
      tags:
      - Roles
    put:
      description: Update Role data by id, only account with role admin can access
        this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role id
        in: path
        name: id
        required: true
        type: string
      - description: tExample JSON body to update Role data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.roleInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
      security:
      - BearerToken: []
      summary: Update Role data. (ADMIN ONLY)
      tags:
      - Roles
  /roles/{id}/users:
    get:
      description: Get all Users data by role id. only admin can access this route,
        if role has'nt have any user it will not display the user data
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      security:
      - BearerToken: []
      summary: Get users data by Role id. (ADMIN ONLY)
      tags:
      - Roles
  /users:
    delete:
      description: Will delete the user account itself, user ID is taken from JWT
        Token so only acount's owner can delete its own accout
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: the body to delete user's own account
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.deleteUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerToken: []
      summary: Delete user's own account
      tags:
      - Users
    get:
      description: Get a list of account with 'user' role.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      summary: Get all account with user role. (PUBLIC)
      tags:
      - Users
    put:
      description: update its own user data, user ID is taken from JWT Token so only
        acount's owner can update the user information
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: tExample JSON body to update User data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controller.userUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerToken: []
      summary: Update User data.
      tags:
      - Users
  /users/{id}:
    delete:
      description: Delete a User by id, only admin can access this route
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      security:
      - BearerToken: []
      summary: Delete User by id (ADMIN ONLY)
      tags:
      - Users
    get:
      description: Get user data by ID.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
      summary: Get single user by ID. (PUBLIC)
      tags:
      - Users
  /users/{id}/profile:
    get:
      description: Get all Users profile data by user id.this will only display account
        with role "user", if  user not create profile yet the profile will not be
        display
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get profiles data by User id. (PUBLIC)
      tags:
      - Users
  /users/{id}/reviews:
    get:
      description: Get all Users review data by user id if user not create review
        yet the review will not appear
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get reviews data by User id. (PUBLIC)
      tags:
      - Users
  /users/role:
    get:
      description: Get role by user id (id is taken from JWT)
      parameters:
      - description: 'Authorization : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
      security:
      - BearerToken: []
      summary: Get role by User id. (ADMIN & USER)
      tags:
      - Users
swagger: "2.0"
